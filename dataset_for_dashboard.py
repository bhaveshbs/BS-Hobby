# -*- coding: utf-8 -*-
"""Dataset_for_Dashboard

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-EnoXen0-XAolhRkctFq02FsOx3fT_NZ
"""

import pandas as pd
import numpy as np

!pip install yelp

from yelp.client import Client

MY_API_KEY = "qjuOorL8sF52G03dTMZcwfcAtoNfzzKF90EJzO6ZETp_2CTUGyOCSROuoKAGbVNFrClg5gSR5pJY8AOx5XuaauPfsTqVYW5eRfZVD95gjupt1CZV15_AbYcerqS-YXYx"

client = Client(MY_API_KEY)

# setup environment
import requests as r
import numpy as np
import pandas as pd
from itertools import product

url = 'https://api.yelp.com/v3/businesses/search'
key = "qjuOorL8sF52G03dTMZcwfcAtoNfzzKF90EJzO6ZETp_2CTUGyOCSROuoKAGbVNFrClg5gSR5pJY8AOx5XuaauPfsTqVYW5eRfZVD95gjupt1CZV15_AbYcerqS-YXYx"
headers = {'Authorization': 'Bearer %s' % key}

parameters = {
    'term': 'wine',
    'location': '02478',
    'limit': 50,
}

response = r.get(url, headers=headers, params=parameters)
test = response.json()
test

test['total']

veg_rest = pd.DataFrame(data=test['businesses'])

veg_rest.shape

veg_rest.head()

masszip = pd.read_excel('masszip.xlsx')

masszip.dtypes

masszip['Zip Code'] = masszip['Zip Code'].apply(str)

print("0"+str(masszip['Zip Code'][0]))

masszip['Zip Code'] = "0"+masszip['Zip Code']

zips = masszip['Zip Code'].to_list()

type(zips[0])

offset = np.arange(0,150,50)

tuples = list(product(zips,offset))

tuples[:10]

listings = []

cols = ['name','categories','review_count','rating','address','zipcode','city','coordinates','phone','transactions']

for zip, step in tuples:
  search_parameters = {
      'location': zip,
      'term': 'vegan restaurant',
      'limit': 50,
      'offset': step}
  resp = r.get(url, headers=headers, params=search_parameters)
  raw_data = resp.json()
  try:
    for business in raw_data['businesses']:
      name = business['name']
      categories = business['categories']
      reviews = business['review_count']
      rating = business['rating']
      address = business['location']['display_address']
      zipcode = business['location']['zip_code']
      city = business['location']['city']
      coordinates = business['coordinates']
      phone = business['display_phone']
      transactions = business['transactions']
      listings.append([name, categories, reviews, rating, address, zipcode, city, coordinates, phone, transactions])
    df = pd.DataFrame.from_records(listings, columns=cols)
  except:
    None


print(f'Total Records: {len(df)}')
df.head()

df.shape

df.head()

mass_veg_rest = df.drop_duplicates(subset=['name','phone'])

offset1 = np.arange(0,50,50)

tuples1 = list(product(zips,offset1))

tuples1[:10]

listings1 = []

cols1 = ['name','categories','review_count','rating','address','zipcode','city','coordinates','phone','transactions']

for zip, step in tuples1:
  search_parameters = {
      'location': zip,
      'term': 'animal shelter',
      'limit': 50}
  resp1 = r.get(url, headers=headers, params=search_parameters)
  raw_data1 = resp1.json()
  try:
    for business in raw_data1['businesses']:
      name = business['name']
      categories = business['categories']
      reviews = business['review_count']
      rating = business['rating']
      address = business['location']['display_address']
      zipcode = business['location']['zip_code']
      city = business['location']['city']
      coordinates = business['coordinates']
      phone = business['display_phone']
      transactions = business['transactions']
      listings1.append([name, categories, reviews, rating, address, zipcode, city, coordinates, phone, transactions])
    df1 = pd.DataFrame.from_records(listings1, columns=cols1)
  except:
    None


print(f'Total Records: {len(df1)}')
df1.head()

df1.shape

mass_shelters = df1.drop_duplicates(subset=['name','phone'])

offset2 = np.arange(0,50,50)

tuples2 = list(product(zips,offset2))

tuples2[:10]

listings2 = []

cols2 = ['name','categories','review_count','rating','address','zipcode','city','coordinates','phone','transactions']

for zip, step in tuples2:
  search_parameters = {
      'location': zip,
      'term': 'vegan grocery store',
      'limit': 50}
  resp2 = r.get(url, headers=headers, params=search_parameters)
  raw_data2 = resp2.json()
  try:
    for business in raw_data2['businesses']:
      name = business['name']
      categories = business['categories']
      reviews = business['review_count']
      rating = business['rating']
      address = business['location']['display_address']
      zipcode = business['location']['zip_code']
      city = business['location']['city']
      coordinates = business['coordinates']
      phone = business['display_phone']
      transactions = business['transactions']
      listings2.append([name, categories, reviews, rating, address, zipcode, city, coordinates, phone, transactions])
    df2 = pd.DataFrame.from_records(listings2, columns=cols2)
  except:
    None


print(f'Total Records: {len(df2)}')
df2.head()

mass_veg_grocery = df2.drop_duplicates(subset=['name','phone'])

mass_veg_grocery.shape

mass_veg_grocery.address[0][1]

mass_veg_grocery.to_csv("mass_veg_grocery.csv")

mass_shelters.to_csv("mass_shelters.csv")
mass_veg_rest.to_csv("mass_veg_rest.csv")

listings3 = []

cols3 = ['name','categories','review_count','rating','address','zipcode','city','coordinates','phone','transactions']

for zip, step in tuples:
  search_parameters = {
      'location': zip,
      'term': 'wine',
      'limit': 50,
      'offset': step}
  resp = r.get(url, headers=headers, params=search_parameters)
  raw_data = resp.json()
  try:
    for business in raw_data['businesses']:
      name = business['name']
      categories = business['categories']
      reviews = business['review_count']
      rating = business['rating']
      address = business['location']['display_address']
      zipcode = business['location']['zip_code']
      city = business['location']['city']
      coordinates = business['coordinates']
      phone = business['display_phone']
      transactions = business['transactions']
      listings3.append([name, categories, reviews, rating, address, zipcode, city, coordinates, phone, transactions])
    df3 = pd.DataFrame.from_records(listings3, columns=cols3)
  except:
    None


print(f'Total Records: {len(df3)}')
df3.head()

mass_wines = df3.drop_duplicates(subset=['name','phone'])

mass_wines.shape

mass_wines.to_csv("mass_wines.csv")